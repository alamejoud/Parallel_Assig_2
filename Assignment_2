#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>
#include <pthread.h>

struct args {
    int **a;
    int **b;
    int **c;
    int n;
    int m;
    int p;
    int thread_num;
};

void *worker(void *arg) {
    struct args *args = arg;
    int start = args->thread_num * (args->n / 4);
    int end = (args->thread_num + 1) * (args->n / 4);
    if (args->thread_num == 3) {
        end = args->n;
    }

    for (int i = start; i < end; i++) {
        for (int j = 0; j < args->p; j++) {
            args->c[i][j] = 0;
            for (int k = 0; k < args->m; k++) {
                args->c[i][j] += args->a[i][k] * args->b[k][j];
            }
        }
    }

    pthread_exit(NULL);
}

void matrixmult_pthreads(int **a, int **b, int **c, int n, int m, int p) {
    pthread_t threads[4];
    struct args args[4];
    
    for (int i = 0; i < 4; i++) {
        args[i].a = a;
        args[i].b = b;
        args[i].c = c;
        args[i].n = n;
        args[i].m = m;
        args[i].p = p;
        args[i].thread_num = i;

        pthread_create(&threads[i], NULL, worker, (void *) &args[i]);
    }

    for (int i = 0; i < 4; i++) {
        pthread_join(threads[i], NULL);
    }
}

void matrixmult_openMP(int **a, int **b, int **c, int m, int n, int p) {
    int i, j, k;
    
    omp_set_num_threads(4);
    
    #pragma omp parallel shared(a,b,c,m,n,p) private(i,j,k)
    {
        #pragma omp for schedule(static)
        for (i = 0; i < m; i++) {
            for (j = 0; j < p; j++) {
                c[i][j] = 0.0;
                for (k = 0; k < n; k++) {
                    c[i][j] += a[i][k] * b[k][j];
                }
            }
        }
    }
}

void matrixmult_series(int **a, int **b, int **c, int m, int n, int p) {
    
    int i, j, k;
    
    for (i = 0; i < m; i++) {
        
        for (j = 0; j < p; j++) {
            
            c[i][j] = 0;
            
            for (k = 0; k < n; k++) {
                
                c[i][j] += a[i][k] * b[k][j];
                
            }
        }
    }
}

int main() {
    int m = 1000;
    int n = 1000;
    int p = 1000;
    int i, j;
    int **a, **b, **c;

    // Allocate memory for the matrices
    a = (int **)malloc(m * sizeof(int *));
    for (i = 0; i < m; i++) {
        a[i] = (int *)malloc(n * sizeof(int));
    }

    b = (int **)malloc(n * sizeof(int *));
    for (i = 0; i < n; i++) {
        b[i] = (int *)malloc(p * sizeof(int));
    }

    c = (int **)malloc(m * sizeof(int *));
    for (i = 0; i < m; i++) {
        c[i] = (int *)malloc(p * sizeof(int));
    }

    // Initialize matrices a and b with random values
    srand(0);
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            a[i][j] = rand() % 10;
        }
    }

    for (i = 0; i < n; i++) {
        for (j = 0; j < p; j++) {
            b[i][j] = rand() % 10;
        }
    }

    // for (i = 0; i < m; i++) {
    //     for (j = 0; j < n; j++) {
    //         printf("%d ", a[i][j]);
    //     }
    //     printf("\n");
    // }

    // printf("\n");

    // for (i = 0; i < n; i++) {
    //     for (j = 0; j < p; j++) {
    //         printf("%d ", b[i][j]);
    //     }
    //     printf("\n");
    // }

    // printf("\n");
    clock_t begin = clock();
    // Multiply matrices a and b to get c
    matrixmult_openMP(a, b, c, m, n, p);
    clock_t end = clock();
    // Print the result matrix c
    // for (i = 0; i < m; i++) {
    //     for (j = 0; j < p; j++) {
    //         printf("%d ", c[i][j]);
    //     }
    //     printf("\n");
    // }

    printf("Time elapsed for oepnMP: %.2f\n", (double)(end - begin) / CLOCKS_PER_SEC);

    begin = clock();
    // Multiply matrices a and b to get c
    matrixmult_pthreads(a, b, c, m, n, p);
    end = clock();
    // Print the result matrix c
    // for (i = 0; i < m; i++) {
    //     for (j = 0; j < p; j++) {
    //         printf("%d ", c[i][j]);
    //     }
    //     printf("\n");
    // }

    printf("Time elapsed for pthreads: %.2f\n", (double)(end - begin) / CLOCKS_PER_SEC);

    begin = clock();
    // Multiply matrices a and b to get c
    matrixmult_series(a, b, c, m, n, p);
    end = clock();
    // Print the result matrix c
    // for (i = 0; i < m; i++) {
    //     for (j = 0; j < p; j++) {
    //         printf("%d ", c[i][j]);
    //     }
    //     printf("\n");
    // }

    printf("Time elapsed for series: %.2f\n", (double)(end - begin) / CLOCKS_PER_SEC);
    // Free the memory
    for (i = 0; i < m; i++) {
        free(a[i]);
    }
    free(a);

    for (i = 0; i < n; i++) {
        free(b[i]);
    }
    free(b);

    for (i = 0; i < m; i++) {
        free(c[i]);
    }
    free(c);

    return 0;
}

